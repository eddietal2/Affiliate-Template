{"version":3,"file":"src_app_pages_contact_contact_module_ts.js","mappings":"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","sources":["./src/app/pages/contact/contact-routing.module.ts","./src/app/pages/contact/contact.module.ts","./src/app/pages/contact/contact.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ContactPage } from './contact.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ContactPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ContactPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ContactPageRoutingModule } from './contact-routing.module';\n\nimport { ContactPage } from './contact.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    ContactPageRoutingModule\n  ],\n  declarations: [ContactPage]\n})\nexport class ContactPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AlertController } from '@ionic/angular';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.page.html',\n  styleUrls: ['./contact.page.scss'],\n})\nexport class ContactPage implements OnInit {\n  contactForm: FormGroup;\n  successModalOpen = false;\n\n  validationMessasges = {\n    email: [\n      { type: 'email', message: 'Must be a valid email address'}\n    ],\n    password: [\n      // tslint:disable-next-line: max-line-length\n      { type: 'pattern', message: 'Password must be at least 6 characters with at least one lowercase character, one uppcase character, and one number.'}\n    ]\n  };\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private alertController: AlertController\n    ) { }\n\n  ngOnInit() {\n    this.contactForm = this.formBuilder.group({\n      fullName: ['', [Validators.required]],\n      email: ['', [Validators.required, Validators.email]],\n      message: ['', [Validators.required]],\n    })\n  }\n\n  // Send Message\n  /**\n   * Send message to server. If there is a 200 repsonse / success,\n   * show success modal.\n   * TODO: Email or Admin Inbox\n   * @param fullName of user sending message\n   * @param email of user sending message\n   * @param message of user sending message\n   * @return boolean / to show modal or error message\n   */\n  submitContactForm(fullName: string, email: string, message: string) {\n    // TODO: Figure out if Email or Admin Inbox method\n  }\n\n  // Show Modal\n  /**\n   * If the message is sent successfully with a 200 Response,\n   * present this modal.\n   */\n   showSuccessModal() {\n    this.successModalOpen = true;\n    setTimeout(() => {\n      // TODO: Clear contactForm\n      return this.successModalOpen = false;\n    }, 3000);\n  }\n\n  // Submit Error Message\n  /**\n   * If the network request fails for any reason why use attemtps\n   * to submit message, show alert.\n   * @param msg Message to display to the user in the alert\n   */\n  async errorAlert(msg: string) {\n    const alert = await this.alertController.create({\n      cssClass: 'my-custom-class',\n      header: 'Error',\n      message: msg,\n      buttons: ['OK']\n    });\n\n    await alert.present();\n\n    const { role } = await alert.onDidDismiss();\n    console.log('onDidDismiss resolved with role', role);\n\n  }\n\n  // Cancel\n  cancel() {\n    this.router.navigateByUrl('/landing')\n  }\n\n}\n"],"names":[],"sourceRoot":"webpack:///"}